; 수열과 구간 쿼리 3
; 문제 설명
; 정수 배열 arr와 2차원 정수 배열 queries이 주어집니다. queries의 원소는 각각 하나의 query를 나타내며, [i, j] 꼴입니다.

; 각 query마다 순서대로 arr[i]의 값과 arr[j]의 값을 서로 바꿉니다.

; 위 규칙에 따라 queries를 처리한 이후의 arr를 return 하는 solution 함수를 완성해 주세요.

; 제한사항
; 1 ≤ arr의 길이 ≤ 1,000
; 0 ≤ arr의 원소 ≤ 1,000,000
; 1 ≤ queries의 길이 ≤ 1,000
; 0 ≤ i < j < arr의 길이
; 입출력 예
; arr	queries	result
; [0, 1, 2, 3, 4]	[[0, 3],[1, 2],[1, 4]]	[3, 4, 1, 0, 2]
; 입출력 예 설명
; 입출력 예 #1

; 각 쿼리에 따라 arr가 다음과 같이 변합니다.
; arr
; [0, 1, 2, 3, 4]
; [3, 1, 2, 0, 4]
; [3, 2, 1, 0, 4]
; [3, 4, 1, 0, 2]
; 따라서 [3, 4, 1, 0, 2]를 return 합니다.

;내풀이: 
func solution(_ arr: [Int], _ queries: [[Int]]) -> [Int] {
    //작업에 사용할 배열을 생성 
    var modifiedArr = arr 
    
    for query in queries {
        // 각 쿼리에 대한 두 요소가 있는지 확인하고, a와 b 값을 가져옴
        guard query.count == 2, let a = query.first, let b = query.last else {
            continue
        }
        // a와 b가 배열의 유효한 인덱스인지 확인
        if a >= 0, a < modifiedArr.count, b >= 0, b < modifiedArr.count {
            // 튜플로 a와 b를 교환 
           (modifiedArr[a], modifiedArr[b]) = (modifiedArr[b],  modifiedArr[a])
        }
    }
    
    return modifiedArr //수정된 배열을 반환 
}

;다른풀이: reduce함수활용 
func solution(_ arr: [Int], _ queries: [[Int]]) -> [Int] {
    return queries.reduce(into: arr) { result, q in
        result.swapAt(q[0], q[1])
    }
}


;다른풀이2: for-Each문활용 
func solution(_ arr:[Int], _ queries:[[Int]]) -> [Int] {
    var arr = arr
    queries.forEach { arr.swapAt($0[0], $0[1]) }
    return arr
}


;다른풀이3: for반복문돌려서 활용 
func solution(_ arr: [Int], _ queries: [[Int]]) -> [Int] {
    var result = arr

    for query in queries {
        let i = query[0]
        let j = query[1]

        let temp = result[i]
        result[i] = result[j]
        result[j] = temp
    }

    return result
}
