; 원소들의 곱과 합
; 문제 설명
; 정수가 담긴 리스트 num_list가 주어질 때, 모든 원소들의 곱이 모든 원소들의 합의 제곱보다 작으면 1을 크면 0을 return하도록 solution 함수를 완성해주세요.

; 제한사항
; 2 ≤ num_list의 길이 ≤ 10
; 1 ≤ num_list의 원소 ≤ 9
; 입출력 예
; num_list	result
; [3, 4, 5, 2, 1]	1
; [5, 7, 8, 3]	0
; 입출력 예 설명
; 입출력 예 #1

; 모든 원소의 곱은 120, 합의 제곱은 225이므로 1을 return합니다.
; 입출력 예 #2

; 모든 원소의 곱은 840, 합의 제곱은 529이므로 0을 return합니다.

; 내풀이 : 변수 a b 생성해서 초기화, 반복문활용해서 리스트안의 원소들의 합과 곱을 구해주고 return식을 만든다 
import Foundation
func solution(_ num_list:[Int]) -> Int {
    var a = 0
    var b = 1
    for i in num_list {
        b *= i
        a += i
    }
    return  a * a >  b    ?   1  :  0
}

;다른풀이1:
import Foundation

func solution(_ num_list:[Int]) -> Int {
    return num_list.reduce(1, *) < num_list.reduce(0, +) * num_list.reduce(0, +) ? 1 : 0
}

;reduce? 

reduce 함수는 Swift에서 컬렉션(배열, 딕셔너리, 집합 등)의 원소를 결합하거나 
합쳐서 하나의 값으로 줄이는 데 사용되는 고차 함수 중 하나입니다.
 reduce 함수는 초기값과 클로저(함수)를 인수로 받아 컬렉션의 원소를 순회하면서 계산을 수행하고 결과 값을 반환합니다.

reduce 함수의 기본 구문은 다음과 같습니다:

func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Element) throws -> Result) rethrows -> Result

initialResult: 초기값으로 사용할 값입니다. 이 값은 Result 타입과 일치해야 합니다.
nextPartialResult: 클로저로, 현재 결과값(Result)과 컬렉션의 다음 원소(Element)를 인수로 받고, 
다음 결과값을 반환해야 합니다. 클로저 내에서 현재 결과값과 다음 원소를 사용하여 계산을 수행합니다.
예를 들어, 주어진 배열의 원소를 모두 더하는 예제를 살펴보겠습니다:

let numbers = [1, 2, 3, 4, 5]

let sum = numbers.reduce(0) { (result, element) in
    return result + element
}

print("배열의 합: \(sum)")

위의 코드에서 reduce 함수는 초기값으로 0을 사용하고, 
배열의 각 원소를 더하여 결과 값을 반환합니다. 
출력 결과는 "배열의 합: 15"가 됩니다. 
이와 같이 reduce 함수를 사용하면 컬렉션의 원소를 조합하거나 합산하는 작업을 간편하게 수행할 수 있습니다.