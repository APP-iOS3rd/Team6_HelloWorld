; 콜라츠 수열 만들기
; 문제 설명
; 모든 자연수 x에 대해서 현재 값이 x이면 x가 짝수일 때는 2로 나누고, x가 홀수일 때는 3 * x + 1로 바꾸는 계산을 계속해서 반복하면 언젠가는 반드시 x가 1이 되는지 묻는 문제를 콜라츠 문제라고 부릅니다.

; 그리고 위 과정에서 거쳐간 모든 수를 기록한 수열을 콜라츠 수열이라고 부릅니다.

; 계산 결과 1,000 보다 작거나 같은 수에 대해서는 전부 언젠가 1에 도달한다는 것이 알려져 있습니다.

; 임의의 1,000 보다 작거나 같은 양의 정수 n이 주어질 때 초기값이 n인 콜라츠 수열을 return 하는 solution 함수를 완성해 주세요.

; 제한사항
; 1 ≤ n ≤ 1,000
; 입출력 예
; n	result
; 10	[10, 5, 16, 8, 4, 2, 1]
; 입출력 예 설명
; 입출력 예 #1

; 순서대로 연산한 결과를 표로 만들면 다음과 같습니다.
; 연산 횟수	x	홀짝 여부
; 0	10	짝수
; 1	5	홀수
; 2	16	짝수
; 3	8	짝수
; 4	4	짝수
; 5	2	짝수
; 6	1	홀수
; 따라서 [10, 5, 16, 8, 4, 2, 1]을 return 합니다.

;내 실수: 
import Foundation

func solution(_ n:Int) -> [Int] {
    var x = Int(n) 
    while x == 1 { 
     if x % 2 == 1 {
        x = 3*x + 1
         continue
    } else if x % 2 == 0 {
        x = 2 * x
         continue
    }
    
 }
    return 1
} 

;while문을 돌려서 진행해야 되거나 재귀함수를 써야할거같다는 생각이 들었다 재귀함수는 하다보니까 어려워서패쓰 
;1 while문작성시에 조건은 = 조건이 만족하면 돌아가는 거임 ( x == 1이 아니라 x != 1 즉 x가 1이 아닐경우에 계속 돌아가라는 뜻임)
;2 while문에 continue가 들어가야하는지 알았음 = 안들어가도됨 
;3 x = x /2 인데 문제를 잘못봄 - 문제를 잘보자..
;4 var x 로 n 값을 가져오는거 까진 좋은데, [Int] 배열로 가져와야하므로 var sequence: [Int] = [x]로 다시 가져와야함 
;5 그다음에 while문을 작성하고 continue안쓰고 while문에서 계속 sequence에 값을 변경해줘야하므로 sequence.append(x)를 해줘야함
;6 그리고 return에 sequnce를 반환시키면 끝임 (1 x 뭐가 반환되는지 헷갈렸는데 [Int]니까 배열이 반환되어서 나와야함  

; 수정된 풀이
import Foundation

func solution(_ n:Int) -> [Int] {
    var x = Int(n) 
    var sequence: [Int] = [x]
    
    
    while x != 1 { 
     if x % 2 == 1 {
        x = 3*x + 1
    } else if x % 2 == 0 {
        x = x / 2 
    }
        sequence.append(x)
    
 }
    return sequence
}


;다른풀이1:
func solution(_ n: Int) -> [Int] {
    return sequence(first: n) { i in i == 1 ? nil : i % 2 == 0 ? i / 2 : 3 * i + 1 }.map { $0 }
}

;다른풀이2: answer.append(n)을 위쪽에 배치하였다. /= 활용 , return 위에도 append씀 
import Foundation

func solution(_ n:Int) -> [Int] {
    var n = n, answer = [Int]()
    while n != 1 {  
        answer.append(n)
        if n % 2 == 0 { n /= 2 } 
        else { n = 3 * n + 1 }       
    }
    answer.append(n)
    return answer
}

;다른풀이3: 어차피 마지막에 1이 리턴되므로 빠져나왔을떄 result.append(1)로서 1을 집어 넣어버리는 모습 

import Foundation

func solution(_ n:Int) -> [Int] {
    var result = [Int]()
    var num = n
    while num != 1 {
        result.append(num)
        if num % 2 == 0 {
            num /= 2
        } else {
            num = num * 3 + 1
        }
    }
    result.append(1)
    return result
}