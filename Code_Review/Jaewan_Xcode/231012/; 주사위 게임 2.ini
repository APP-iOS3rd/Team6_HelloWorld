; 주사위 게임 2
; 문제 설명
; 1부터 6까지 숫자가 적힌 주사위가 세 개 있습니다. 세 주사위를 굴렸을 때 나온 숫자를 각각 a, b, c라고 했을 때 얻는 점수는 다음과 같습니다.

; 세 숫자가 모두 다르다면 a + b + c 점을 얻습니다.
; 세 숫자 중 어느 두 숫자는 같고 나머지 다른 숫자는 다르다면 (a + b + c) × (a2 + b2 + c2 )점을 얻습니다.
; 세 숫자가 모두 같다면 (a + b + c) × (a2 + b2 + c2 ) × (a3 + b3 + c3 )점을 얻습니다.
; 세 정수 a, b, c가 매개변수로 주어질 때, 얻는 점수를 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; a, b, c는 1이상 6이하의 정수입니다.
; 입출력 예
; a	b	c	result
; 2	6	1	9
; 5	3	3	473
; 4	4	4	110592
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번에서 세 주사위 숫자가 모두 다르므로 2 + 6 + 1 = 9점을 얻습니다. 따라서 9를 return 합니다.
; 입출력 예 #2

; 예제 2번에서 두 주사위 숫자만 같으므로 (5 + 3 + 3) × (52 + 32 + 32 ) = 11 × 43 = 473점을 얻습니다. 따라서 473을 return 합니다.
; 입출력 예 #3

; 예제 3번에서 세 주사위 숫자가 모두 같으므로 (4 + 4 + 4) × (42 + 42 + 42 ) × (43 + 43 + 43 ) = 12 × 48 × 192 = 110,592점을 얻습니다. 따라서 110592를 return 합니다.

;내풀이; 그냥 경우의수 모두 다 정리
import Foundation

func solution(_ a:Int, _ b:Int, _ c:Int) -> Int {
    if  a != b && b != c && c != a {
        return a + b + c
    } else if a == b && b != c ||
              b == c && c != a ||
              c == a && a != b  {
                  return (a + b + c) * (a * a + b * b + c * c)
              } else if a == b && b == c {
                  return (a + b + c) * (a * a + b * b + c * c) * ( a * a * a + b * b * b + c * c * c)
              } else {
                  return 0
              }
  
}


;다른풀이1:  a b c 더한값을 x 에 저장, a b c 각각 제곱한것을 y에 저장  a b c 각각 세제곱한것을 z에 저장시켜서 정리 
; x * y = 더한값 * 제곱한값이라는 뜻이 됨 ( 요구사항에 해당 ) 

import Foundation 

func solution(_ a:Int, _ b:Int, _ c:Int) -> Int {
    var result = 0

    if a != b && b != c && c != a {
        result = a + b + c
    } else if a == b && b == c {
        let x = a + b + c
        let y = [a, b, c].reduce(0) {
            $0 + Int(pow(Double($1), 2))
        }
        let z = [a, b, c].reduce(0) {
            $0 + Int(pow(Double($1), 3))
        }
        result = x * y * z
    } else {
        let x = a + b + c
        let y = [a, b, c].reduce(0) {
            $0 + Int(pow(Double($1), 2))
        }
        result = x * y
    }

    return result
}


;다른풀이2: switch Set([a,b,c]).count { case1    case2    case3 }으로 정리 

;case 1: a, b, c가 모두 같은 값을 가지는 경우 
; 이 경우, Set을 사용하여 중복된 값을 제거하고, Set의 원소 개수가 1이 됩니다.
; 세 개의 숫자가 모두 같으므로, a, b, c의 합을 x에 할당합니다.
; a, b, c 각각을 제곱한 값을 모두 더한 값을 y에 할당합니다.
; a, b, c 각각을 세제곱한 값을 모두 더한 값을 z에 할당합니다.
; x * y * z 값을 반환합니다.

; case 2: 두 숫자가 같고 나머지 하나는 다른 값을 가지는 경우
; 이 경우, Set을 사용하여 중복된 값을 제거하고, Set의 원소 개수가 2가 됩니다.
; 두 숫자가 같기 때문에, a, b, c의 합을 x에 할당합니다.
; a, b, c 각각을 제곱한 값을 모두 더한 값을 y에 할당합니다.
; x * y 값을 반환합니다.

; default: 모든 숫자가 다른 값을 가지는 경우
; 이 경우, Set을 사용하여 중복된 값을 제거하고, Set의 원소 개수가 3이 됩니다.
; 모든 숫자가 다르기 때문에, a, b, c의 합을 반환합니다.
; 이 함수는 세 개의 숫자 간의 관계를 확인하고, 각각의 경우에 해당하는 계산을 수행하여 결과를 반환합니다.

func solution(_ a: Int, _ b: Int, _ c: Int) -> Int {
    switch Set([a, b, c]).count {
    case 1: return (a + b + c) * (a * a + b * b + c * c) * (a * a * a + b * b * b + c * c * c)
    case 2: return (a + b + c) * (a * a + b * b + c * c)
    default: return a + b + c
    }
}


;다른풀이3: score변수를 초기화해서 같으면 1추가 하는식으로 진행
;모두가같으면 case3 , 1개만 같으면 case1 모두다 다르면 case0으로 가는 것을 활용
import Foundation

func solution(_ a:Int, _ b:Int, _ c:Int) -> Int {
    var score = 0
    var result = 0
    if a == b { score += 1 }
    if a == c { score += 1 }
    if b == c { score += 1 }

    switch score {
        case 0:
        result = (a + b + c)
        case 1:
        result = (a + b + c) * (a*a + b*b + c*c)
        case 3:
        result = (a + b + c) * (a*a + b*b + c*c) * (a*a*a + b*b*b + c*c*c)
        default:
        break
    }

    return result