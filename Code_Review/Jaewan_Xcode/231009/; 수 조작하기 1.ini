; 수 조작하기 1
; 문제 설명
; 정수 n과 문자열 control이 주어집니다. control은 "w", "a", "s", "d"의 4개의 문자로 이루어져 있으며, control의 앞에서부터 순서대로 문자에 따라 n의 값을 바꿉니다.

; "w" : n이 1 커집니다.
; "s" : n이 1 작아집니다.
; "d" : n이 10 커집니다.
; "a" : n이 10 작아집니다.
; 위 규칙에 따라 n을 바꿨을 때 가장 마지막에 나오는 n의 값을 return 하는 solution 함수를 완성해 주세요.

; 제한사항
; -100,000 ≤ n ≤ 100,000
; 1 ≤ control의 길이 ≤ 100,000
; control은 알파벳 소문자 "w", "a", "s", "d"로 이루어진 문자열입니다.
; 입출력 예
; n	control	result
; 0	"wsdawsdassw"	-1
; 입출력 예 설명
; 입출력 예 #1

; 수 n은 control에 따라 다음과 같은 순서로 변하게 됩니다.
; 0 → 1 → 0 → 10 → 0 → 1 → 0 → 10 → 0 → -1 → -2 → -1
; 따라서 -1을 return 합니다.

;내풀이: switch문 활용해서 푸는방법
;**내가 배운점: var control 부분이랑 반복적으로 문자열이 들어가야하므로 for문을써줘야하는점
;  switch문의 변수사항을 char로 뽑아야하는점, default값 break로 하는 점 

import Foundation

func solution(_ n: Int, _ control: String) -> Int {
    
    var result = n
    for char in control {
    switch char {
        case "w":
            result += 1
        case "s":
            result -= 1
        case "d":
            result += 10
        case "a":
            result -= 10
        default:
            break
        }
    }
    return result
}


;다른풀이1:딕셔너리, reduce함수 이용 , 클로저활용, 강제 언래핑진행 
import Foundation

func solution(_ n:Int, _ control:String) -> Int {
    let op: [Character: Int] = ["w": 1, "s": -1, "d": 10, "a": -10]
    return n + control.reduce(0) { $0 + op[$1]! }
}
; 주어진 문자열 control에 대한 동작을 정의한 딕셔너리 op을 만듭니다.
; "w"일 때는 1을 더하고, "s"일 때는 1을 빼고, "d"일 때는 10을 더하고, "a"일 때는 10을 뺍니다.
;     reduce 함수를 사용하여 control 문자열의 각 문자를 처리하고 초기값을 0으로 설정합니다.
;     클로저 { $0 + op[$1]! }는 이전 결과($0)와 현재 문자에 해당하는 동작(op[$1])을 더합니다.
;     op[$1]!를 사용하여 딕셔너리에서 동작을 찾고 강제 언래핑합니다.
;     각 문자에 대한 동작을 모두 더한 값을 반환합니다.


;다른풀이2: reduce함수활용해서 return에 함수 적용 = acc활용
func solution(_ n: Int, _ control: String) -> Int {
       ;  // 문자열 control을 reduce 함수로 처리합니다. 초기값은 n으로 설정합니다.
    return control.reduce(n) { acc, c in     
       ; // 각 문자 c에 대한 동작을 삼항 연산자를 사용하여 계산하고 누적값에 더합니다.
       acc + (c == "w" ? 1 : c == "s" ? -1 : c == "d" ? 10 : -10)
    }
}

; ***acc는 "accumulator"의 약어로, reduce 함수에서 누적된 값을 나타내는 변수입니다. 
; reduce 함수는 배열 또는 문자열과 같은 시퀀스의 모든 요소를 순회하면서 특정 연산을 수행하고 
; 그 결과를 누적할 때 사용됩니다. 이때 acc는 누적된 값을 나타냅니다.
; 함수 내부에서 reduce 함수는 초기값 n을 가지고 문자열 control의 각 문자를 순회하면서 연산을 수행하고, 
; 그 결과를 acc에 누적합니다. 예를 들어, "wsdawsdassw"와 같은 문자열 control이 주어지면, 
; 각 문자에 대한 동작을 순서대로 계산하고 acc에 누적하여 최종 결과를 반환하는 역할을 합니다.
; 코드 내에서 acc는 각 문자에 대한 동작을 누적하는데 사용되며,
;  reduce 함수가 마지막으로 반환하는 값은 acc의 최종 누적 값입니다.