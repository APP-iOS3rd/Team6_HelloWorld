; 간단한 논리 연산
; 문제 설명
; boolean 변수 x1, x2, x3, x4가 매개변수로 주어질 때, 다음의 식의 true/false를 return 하는 solution 함수를 작성해 주세요.

; (x1 ∨ x2) ∧ (x3 ∨ x4)
; 입출력 예
; x1	x2	x3	x4	result
; false	true	true	true	true
; true	false	false	false	false
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번의 x1, x2, x3, x4로 식을 계산하면 다음과 같습니다.

; (x1 ∨ x2) ∧ (x3 ∨ x4) ≡ (F ∨ T) ∧ (T ∨ T) ≡ T ∧ T ≡ T

; 따라서 true를 return 합니다.

; 입출력 예 #2

; 예제 2번의 x1, x2, x3, x4로 식을 계산하면 다음과 같습니다.

; (x1 ∨ x2) ∧ (x3 ∨ x4) ≡ (T ∨ F) ∧ (F ∨ F) ≡ T ∧ F ≡ F

; 따라서 false를 return 합니다.

; ∨과 ∧의 진리표는 다음과 같습니다.

; x	y	x ∨ y	x ∧ y
; T	T	T	T
; T	F	T	F
; F	T	T	F
; F	F	F	F

;내풀이: return에 주어진 식이 맞아떨어지도록 식을 만듬
import Foundation

func solution(_ x1:Bool, _ x2:Bool, _ x3:Bool, _ x4:Bool) -> Bool {
    return (x1 || x2) && (x3 || x4)
}
 
;****문제에서  ∧ (논리곱, AND) 연산자 ,  ∨ (논리합, OR) 연산자 임을 개념이 없었음 이해했으면 더 빨리 풀엇을듯

; 주어진 논리식은 먼저 (x1 ∨ x2) 부분을 계산하고, 그 다음에 (x3 ∨ x4) 부분을 계산한 후, 
; 이 두 부분의 결과를 ∧ (논리곱, AND) 연산자로 결합합니다.

; (x1 ∨ x2) 부분에서는 ∨ (논리합, OR) 연산자를 사용하여 
; x1과 x2 중 어느 하나라도 true이면 true를 반환하고, 둘 다 false이면 false를 반환합니다.
; 이 부분은 두 개의 입력 중 하나라도 true라면 결과가 true가 되고, 둘 다 false라면 결과가 false가 됩니다.

; (x3 ∨ x4) 부분에서도 동일하게 ∨ (논리합, OR) 연산자를 사용하여 
; x3과 x4 중 어느 하나라도 true이면 true를 반환하고, 둘 다 false이면 false를 반환합니다.

; 마지막으로, 이렇게 계산된 두 부분의 결과를 ∧ (논리곱, AND) 연산자를 사용하여 결합합니다. 
; ∧ 연산자는 두 개의 입력이 모두 true일 때만 true를 반환하고, 그 외에는 false를 반환합니다.

; 따라서, 이 논리식은 주어진 x1, x2, x3, x4 변수에 대해서 (x1 ∨ x2)와 (x3 ∨ x4)가 true일 때만
; 최종 결과가 true가 되고, 그 외의 경우에는 false가 됩니다. 이것이 코드에서 solution 함수가 작성한 논리식을 설명한 내용입니다.


;다른풀이1: 좀더 위에 풀이를 함수2개로 활용하여 풂
import Foundation

func solution(_ x1: Bool, _ x2: Bool, _ x3: Bool, _ x4: Bool) -> Bool {
    let a = merge(x1, x2)
    let b = merge(x3, x4)
    return a && b ? true : false
}

func merge(_ a: Bool, _ b: Bool) -> Bool {
    return (a || b) ? true : false
}

;다른풀이2: 반복해서 참거짓을 풀어야하는게 재귀함수와 같다고 생각
;but signal: segmentation fault (core dumped)오류가뜸 ( 프로그래머스 상에서는 ) 스택오버플로우현상이 일어나서 반복문등 기타풀이 요망됨 
func evaluateExpression(_ x1: Bool, _ x2: Bool, _ x3: Bool, _ x4: Bool) -> Bool {
    // Base case: 논리식에 변수가 없으면 입력값을 그대로 반환
    if !x1 && !x2 && !x3 && !x4 {
        return false
    }

    // (x1 ∨ x2) 부분 계산
    let part1 = x1 || x2

    // (x3 ∨ x4) 부분 계산
    let part2 = x3 || x4

    // 재귀 호출하여 (part1) ∧ (part2) 전체 논리식 계산
    let result = evaluateExpression(part1, part2, false, false)

    return result
}
