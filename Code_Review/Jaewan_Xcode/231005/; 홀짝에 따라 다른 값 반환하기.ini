; 홀짝에 따라 다른 값 반환하기
; 문제 설명
; 양의 정수 n이 매개변수로 주어질 때, n이 홀수라면 n 이하의 홀수인 모든 양의 정수의 합을 return 하고 n이 짝수라면 n 이하의 짝수인 모든 양의 정수의 제곱의 합을 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; 1 ≤ n ≤ 100
; 입출력 예
; n	result
; 7	16
; 10	220
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번의 n은 7로 홀수입니다. 7 이하의 모든 양의 홀수는 1, 3, 5, 7이고 이들의 합인 1 + 3 + 5 + 7 = 16을 return 합니다.
; 입출력 예 #2

; 예제 2번의 n은 10으로 짝수입니다. 10 이하의 모든 양의 짝수는 2, 4, 6, 8, 10이고 이들의 제곱의 합인 22 + 42 + 62 + 82 + 102 = 4 + 16 + 36 + 64 + 100 = 220을 return 합니다.


; 내풀이: while문사용

; func solution(_ n: Int) -> Int {
;     var result = 0   // 결과를 저장할 변수를 초기화진행
    
;     if n % 2 == 1 {   // n이 홀수인 경우
;         var current = 1 // 현재 값을 초기화함
;         while current <= n {  // current가 n이하인 동안 반복
;             result += current // 결과에 현재값을 더함
;             current += 2 // 다음 홀수로 이동하기 위해서 2를 더함 
;         }
;     } else {  // n이 짝수인 경우
;         var current = 2  // 현재 값을 초기화함
;         while current <= n { // current가 n이하인동안 반복
;             result += current * current // 결과에 현재값 * 현재값함
;             current += 2 // 다음 짝수로 이동하기 위해 2를 더함 
;         }
;     }
    
;     return result  // 최종 결과를 반환
; }


; *** while문 : 겁먹지 말기
; while 조건 {
;     // 조건이 참인 동안 실행될 코드
; }
; 조건은 불리언 값인 표현식 또는 불리언 값을 반환하는 함수가 될 수 있습니다. while 문은 조건이 참일 때 코드 블록을 실행하고, 코드 블록이 실행된 후에 다시 조건을 평가합니다. 조건이 여전히 참이면 코드 블록이 다시 실행되고, 이러한 프로세스가 반복됩니다. 조건이 거짓이 되면 반복이 종료됩니다.

; 예를 들어, 다음은 1부터 10까지의 정수를 출력하는 간단한 Swift while 루프의 예입니다:

; var i = 1
; while i <= 10 {
;     print(i)
;     i += 1 // i를 1씩 증가시킴
; }
; 위 코드는 i가 1에서 시작해서 i가 10 이하인 동안에는 print(i)를 실행하고, i를 1씩 증가시키는 작업을 반복하게 됩니다. 결과적으로 1부터 10까지의 정수가 출력됩니다. while 루프를 사용하면 조건이 충족되는 한 코드 블록을 반복해서 실행할 수 있습니다.


;다른풀이1: stride함수사용 
import Foundation

func solution(_ n:Int) -> Int {
    if n % 2 == 0 { return stride(from: 2, through: n, by: 2).reduce(0) { $0 + $1 * $1 } }
    else { return stride(from: 1, through: n, by: 2).reduce(0, +) }
}

; tride 함수:

; stride 함수는 일정한 간격으로 값을 생성하는 데 사용됩니다.
; 첫 번째 인수는 시작 값, 두 번째 인수는 종료 값, 세 번째 인수는 간격(step)을 나타냅니다.
; 예를 들어, stride(from: 2, through: n, by: 2)는 2부터 n까지 2의 간격으로 값을 생성합니다.
; swift
; Copy code
; // 예시: 2부터 10까지의 짝수를 생성
; let evenNumbers = stride(from: 2, through: 10, by: 2) // [2, 4, 6, 8, 10]
; stride를 사용하면 원하는 범위 내에서 간격을 두고 값들을 생성할 수 있으므로, 코드가 더 직관적이고 간결해집니다.

;reduce 함수
; reduce 함수는 배열 또는 시퀀스의 모든 요소를 결합하여 단일 값으로 반환하는 데 사용됩니다.
; 초기값과 클로저(함수)를 인수로 받으며, 클로저는 누적된 결과값과 현재 요소를 받아 계산합니다.
; 예를 들어, reduce(0) { $0 + $1 * $1 }는 배열의 각 요소를 제곱하고 그 결과를 누적하여 합산합니다.
; swift
; Copy code
; // 예시: 배열의 각 요소 제곱값의 합 구하기
; let numbers = [1, 2, 3, 4, 5]
; let sumOfSquares = numbers.reduce(0) { $0 + $1 * $1 } // 55
; reduce를 사용하면 반복문을 직접 작성할 필요 없이 간단하게 값을 누적하고 연산할 수 있으며, 코드의 가독성을 향상시킵니다.

; 코드에서 stride와 reduce를 함께 사용하면, 주어진 범위에서 값을 생성하고 그 값을 연산하여 원하는 결과를 더 효율적이고 간결하게 얻을 수 있습니다.



;다른풀이2: if- else문 활용
; import Foundation

; func solution(_ n:Int) -> Int {

;     var result: Int = 0

;     if n % 2 != 0 { // n == 홀수
;         for num in 1...n {
;             if num % 2 != 0 { result += num }
;         }
;     } else {        // n == 짝수
;         for num in 1...n {
;             if num % 2 == 0 { result += num * num }
;         }
;     }

;     return result
; }