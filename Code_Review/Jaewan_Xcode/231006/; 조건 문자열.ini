; 조건 문자열
; 문제 설명
; 문자열에 따라 다음과 같이 두 수의 크기를 비교하려고 합니다.

; 두 수가 n과 m이라면
; ">", "=" : n >= m
; "<", "=" : n <= m
; ">", "!" : n > m
; "<", "!" : n < m
; 두 문자열 ineq와 eq가 주어집니다. ineq는 "<"와 ">"중 하나고, eq는 "="와 "!"중 하나입니다. 그리고 두 정수 n과 m이 주어질 때, n과 m이 ineq와 eq의 조건에 맞으면 1을 아니면 0을 return하도록 solution 함수를 완성해주세요.

; 제한 사항
; 1 ≤ n, m ≤ 100
; 입출력 예
; ineq	eq	n	m	result
; "<"	"="	20	50	1
; ">"	"!"	41	78	0
; 입출력 예 설명
; 입출력 예 #1

; 20 <= 50은 참이기 때문에 1을 return합니다.
; 입출력 예 #2

; 41 > 78은 거짓이기 때문에 0을 return합니다.

;내풀이: switch문이용해서 관련 연산자들의 경우의수를 전부 case로풀이, 1:0 삼항연산자로 응용풀이 
; ** 주의:연산자 case문에 넣을때 > < 구분 잘해서 넣기
import Foundation

func solution(_ ineq:String, _ eq:String, _ n:Int, _ m:Int) -> Int {
    
    
    switch(ineq, eq) {
        case("<","="):
            return n <= m ? 1:0
         case(">","="):
            return n >= m ? 1:0
         case(">","!"):
            return n > m ? 1:0
         case("<","!"):
            return n < m ? 1:0
        default:
             return 0
    }
}


;다른풀이1: case문에 경우 넣을떄 ineq+eq로 바로 넣어서 보기 쉽게 풀이
\
import Foundation

func solution(_ ineq:String, _ eq:String, _ n:Int, _ m:Int) -> Int {
    switch ineq+eq {
        case ">=": return n >= m ? 1 : 0
        case "<=": return n <= m ? 1 : 0
        case ">!": return n > m ? 1 : 0
        case "<!": return n < m ? 1 : 0
        default: return 0
    }
}

;다른풀이2: ! 와 = 는 반대임을 이용해서 삼항연산자와 이중if문을 이용

import Foundation

func solution(_ ineq:String, _ eq:String, _ n:Int, _ m:Int) -> Int {
    if ineq == "<" {
        if eq == "=" {
            return n <= m ? 1 : 0
        } else {
            return n < m ? 1 : 0
        }
    } else {
        if eq == "=" {
            return n >= m ? 1 : 0
        } else {
            return n > m ? 1 : 0
        }
    }
}