; 두 수의 연산값 비교하기
; 문제 설명
; 연산 ⊕는 두 정수에 대한 연산으로 두 정수를 붙여서 쓴 값을 반환합니다. 예를 들면 다음과 같습니다.

; 12 ⊕ 3 = 123
; 3 ⊕ 12 = 312
; 양의 정수 a와 b가 주어졌을 때, a ⊕ b와 2 * a * b 중 더 큰 값을 return하는 solution 함수를 완성해 주세요.

; 단, a ⊕ b와 2 * a * b가 같으면 a ⊕ b를 return 합니다.

; 제한사항
; 1 ≤ a, b < 10,000
; 입출력 예
; a	b	result
; 2	91	364
; 91	2	912
; 입출력 예 설명
; 입출력 예 #1

; a ⊕ b = 291 이고, 2 * a * b = 364 입니다. 둘 중 더 큰 값은 364 이므로 364를 return 합니다.
; 입출력 예 #2

; a ⊕ b = 912 이고, 2 * a * b = 364 입니다. 둘 중 더 큰 값은 912 이므로 912를 return 합니다.

;내풀이: let concatenationAB와 product2AB처리과정이 중요, 그다음으론 if문으로 조건처리 
; ** 주의: concatenationAB는 옵셔널 타입 Int?으로 선언되어 있습니다.
; 따라서 옵셔널 바인딩을 통해 값에 접근하거나 
; 강제 언래핑(!)을 사용해야 합니다. 
; 이 때, 옵셔널 값이 nil일 수 있으므로 강제 언래핑을 사용하면 런타임 에러가 발생할 수 있습니다


;다른풀이1: 삼항연산자이용 re
import Foundation

func solution(_ a:Int, _ b:Int) -> Int {
    let calculationA = Int(String(a)+String(b))!
    let calculationB = 2 * a * b
    return calculationA < calculationB ? calculationB : calculationA
}

;다른풀이2 :
func solution(_ a: Int, _ b: Int) -> Int { max(Int("\(a)\(b)") ?? 0, 2 * a * b) }
; 설명주어진 코드는 Swift에서 간단한 한 줄 함수로 작성된 것입니다. 이 코드는 두 정수 a와 b를 입력으로 받아서, 두 가지 값을 비교하여 더 큰 값을 반환합니다.

; max 함수: Swift의 max 함수는 두 개의 값 중에서 더 큰 값을 반환합니다.

; Int("\(a)\(b)") ?? 0: 이 부분은 문자열로 두 정수 a와 b를 연결한 결과를 정수로 변환합니다. Int("\(a)\(b)")는 문자열로 연결한 값을 정수로 변환하려고 시도하며, 만약 변환이 실패하면 nil이 반환됩니다. ?? 0는 옵셔널 바인딩을 사용하여, 변환 실패 시 기본값으로 0을 사용하도록 합니다.

; 2 * a * b: 두 정수 a와 b를 곱한 값을 계산합니다.

; 최종적으로, 이 코드는 두 값을 비교하여 더 큰 값을 반환합니다. 만약 문자열로 연결한 값이나 변환에 실패하면 (예: 입력이 숫자가 아닌 문자열인 경우), 기본값으로 0을 반환합니다.


;다른풀이 3: 순서만 다르긴한데, return에 max함수이용 
import Foundation

func solution(_ a: Int, _ b: Int) -> Int {

    let ab = Int("\(a)\(b)")!
    let a2b = Int("\(2 * a * b)")!

    return max(ab, a2b)
}