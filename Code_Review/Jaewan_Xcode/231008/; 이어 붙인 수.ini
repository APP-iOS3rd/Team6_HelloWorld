; 이어 붙인 수
; 문제 설명
; 정수가 담긴 리스트 num_list가 주어집니다. num_list의 홀수만 순서대로 이어 붙인 수와 짝수만 순서대로 이어 붙인 수의 합을 return하도록 solution 함수를 완성해주세요.

; 제한사항
; 2 ≤ num_list의 길이 ≤ 10
; 1 ≤ num_list의 원소 ≤ 9
; num_list에는 적어도 한 개씩의 짝수와 홀수가 있습니다.
; 입출력 예
; num_list	result
; [3, 4, 5, 2, 1]	393
; [5, 7, 8, 3]	581
; 입출력 예 설명
; 입출력 예 #1

; 홀수만 이어 붙인 수는 351이고 짝수만 이어 붙인 수는 42입니다. 두 수의 합은 393입니다.
; 입출력 예 #2

; 홀수만 이어 붙인 수는 573이고 짝수만 이어 붙인 수는 8입니다. 두 수의 합은 581입니다.

;내풀이:   a , b 를 문자열로 설정해서 string형으로 i를 받아서 +=시킴 
; 이후에 a와 b를 숫자형으로 다시 반환시키고 (let)   그것을 더하는것으로 리턴진행
import Foundation

func solution(_ num_list:[Int]) -> Int {
    var a = ""
    var b = ""
     
     for i in num_list {
        if i % 2 == 0 {
           a += String(i)
        } else if i % 2 == 1 {
            b += String(i)
        }
         
    } 
     let a1 = Int(a) ?? 0     ; 문자열의 배열을 인트형으로 다시 전환할때 팁 ?? 0으로 정수가없을떈 0으로 처리한다는것이 중요 
     let b1 = Int(b) ?? 0     ;  let b1 = [Int] 안에 넣지말고 let b1 = Int(b1) ?? 0 으로 처리 
    
    return a1 + b1
}


;다른풀이1: return Int(even)! + Int(odd)!을사용
; 강제 언래핑(Int(even)! 및 Int(odd)!)을 사용하여 문자열을 정수로 변환하고 두 정수를 더함
; 하지만 정수로 변환할 수 없는 문자열이 들어오면 앱이 충돌할 수 있으므로 주의
import Foundation

func solution(_ num_list:[Int]) -> Int {
    var even = "", odd = ""
    for num in num_list {
        if num % 2 == 0 {
            even += String(num)
        } else {
            odd += String(num)
        }
    }

    return Int(even)! + Int(odd)!
}

; if let evenInt = Int(even), let oddInt = Int(odd) {
    ;     return evenInt + oddInt
    ; } else {
    ;     // 문자열을 정수로 변환할 수 없는 경우에 대한 처리
    ;     return 0 // 또는 다른 기본값을 반환할 수 있습니다.
    ; } 

    ;으로 마지막부분을 예외처리해주면 더 좋았을듯함 [강제 옵셔널 바인딩] 




;다른풀이2 : map함수 , 필터링을 거쳐서 합산함 
import Foundation

func solution(_ num_list:[Int]) -> Int {
    let even = Int(num_list.filter { $0 % 2 == 0 }.map { String($0) }.joined())!
    let odd = Int(num_list.filter { $0 % 2 != 0 }.map { String($0) }.joined())!
    return even + odd
}
