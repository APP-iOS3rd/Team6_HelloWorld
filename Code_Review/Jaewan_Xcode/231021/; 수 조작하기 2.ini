; 수 조작하기 2
; 문제 설명
; 정수 배열 numLog가 주어집니다. 처음에 numLog[0]에서 부터 시작해 "w", "a", "s", "d"로 이루어진 문자열을 입력으로 받아 순서대로 다음과 같은 조작을 했다고 합시다.

; "w" : 수에 1을 더한다.
; "s" : 수에 1을 뺀다.
; "d" : 수에 10을 더한다.
; "a" : 수에 10을 뺀다.
; 그리고 매번 조작을 할 때마다 결괏값을 기록한 정수 배열이 numLog입니다. 즉, numLog[i]는 numLog[0]로부터 총 i번의 조작을 가한 결과가 저장되어 있습니다.

; 주어진 정수 배열 numLog에 대해 조작을 위해 입력받은 문자열을 return 하는 solution 함수를 완성해 주세요.

; 제한사항
; 2 ≤ numLog의 길이 ≤ 100,000
; -100,000 ≤ numLog[0] ≤ 100,000
; 1 ≤ i ≤ numLog의 길이인 모든 i에 대해 |numLog[i] - numLog[i - 1]|의 값은 1 또는 10입니다.
; 입출력 예
; numLog	result
; [0, 1, 0, 10, 0, 1, 0, 10, 0, -1, -2, -1]	"wsdawsdassw"
; 입출력 예 설명
; 입출력 예 #1

; result인 "wsdawsdassw"를 따라 numLog[0]에서부터 시작해 조작을 하면 numLog의 값과 순서대로 일치합니다. 따라서 "wsdawsdassw"를 return 합니다.
; Hint
; "수 조작하기 1" 문제의 n값이 numLog[0]에 해당하며, 이 문제에서 주어진 numLog에 따라 "수 조작하기 1" 문제의 control을 구하는 문제라고 이해할 수 있습니다.

; 입출력 예 #1은 "수 조작하기 1" 문제의 입출력 예 #1과 같은 예시이므로 참고하시기 바랍니다.

;내풀이: switch문활용해서 품 // 문자열로 변환되니까 var b = "" 임을 설정해야했고,   문자열에 .append() 이용가능함을 숙지하자.
func solution(_ numLog:[Int]) -> String {
    var b = ""
    var a = numLog[0]
    for i in 1..<numLog.count {
       var c = numLog[i] - numLog[i-1]
    switch c {
        case 1: 
        b.append("w")
        a += 1 
        case -1:
        b.append("s")
        a -= 1
        case 10:
        b.append("d")
        a += 10
        case -10:
        b.append("a")
        a -= 10
        default:
         return b
          break
             }
                                
        }
return b
}


;다른풀이1:딕셔너리 활용
func solution(_ numLog:[Int]) -> String {
    let log: [Int: String] = [1: "w", -1: "s", 10: "d", -10: "a"]
    return (1..<numLog.count).map { log[numLog[$0] - numLog[$0 - 1]]! }.joined()
}

;다른풀이2: enumerated 함수 활용 
func solution(_ numLog:[Int]) -> String {
    var answer = ""
    for (i, n) in numLog.enumerated() {
        if i > 0 {
            let cmp = n - numLog[i-1]
            switch cmp {
                case 1: answer += "w"
                case -1: answer += "s"
                case 10: answer += "d"
                default: answer += "a"
            }
        }
    }
    return answer
}

;*** enumerated()함수 활용
; enumerated()는 Swift에서 제공하는 배열 또는 시퀀스를 순회하면서 각 요소의 인덱스와 값을 함께 얻을 수 있는 유용한 메서드입니다. 
; 이 메서드는 for-in 루프와 함께 자주 사용됩니다.

; 여기서 enumerated() 함수가 하는 일은 다음과 같습니다:

; 배열 또는 시퀀스를 순회합니다.
; 각 요소에 대한 순회 인덱스와 값을 포함하는 튜플을 생성합니다.
; 예를 들어, 다음은 enumerated() 함수를 사용하는 간단한 예제입니다:

; let fruits = ["Apple", "Banana", "Cherry"]

; for (index, fruit) in fruits.enumerated() {
;     print("Index: \(index), Fruit: \(fruit)")
; }

;  >>
; Index: 0, Fruit: Apple
; Index: 1, Fruit: Banana
; Index: 2, Fruit: Cherry
; enumerated() 함수를 사용하면 배열 또는 시퀀스를 순회하면서 각 요소의 인덱스와 값을 동시에 처리할 수 있어서 유용합니다. 
; 이는 특히 반복 작업을 수행할 때 인덱스 정보가 필요한 경우에 유용하게 활용됩니다.


