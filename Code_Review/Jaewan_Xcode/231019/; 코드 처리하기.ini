; 코드 처리하기
; 문제 설명
; 문자열 code가 주어집니다.
; code를 앞에서부터 읽으면서 만약 문자가 "1"이면 mode를 바꿉니다. mode에 따라 code를 읽어가면서 문자열 ret을 만들어냅니다.

; mode는 0과 1이 있으며, idx를 0 부터 code의 길이 - 1 까지 1씩 키워나가면서 code[idx]의 값에 따라 다음과 같이 행동합니다.

; mode가 0일 때
; code[idx]가 "1"이 아니면 idx가 짝수일 때만 ret의 맨 뒤에 code[idx]를 추가합니다.
; code[idx]가 "1"이면 mode를 0에서 1로 바꿉니다.
; mode가 1일 때
; code[idx]가 "1"이 아니면 idx가 홀수일 때만 ret의 맨 뒤에 code[idx]를 추가합니다.
; code[idx]가 "1"이면 mode를 1에서 0으로 바꿉니다.
; 문자열 code를 통해 만들어진 문자열 ret를 return 하는 solution 함수를 완성해 주세요.

; 단, 시작할 때 mode는 0이며, return 하려는 ret가 만약 빈 문자열이라면 대신 "EMPTY"를 return 합니다.

; 제한사항
; 1 ≤ code의 길이 ≤ 100,000
; code는 알파벳 소문자 또는 "1"로 이루어진 문자열입니다.
; 입출력 예
; code	result
; "abc1abc1abc"	"acbac"
; 입출력 예 설명
; 입출력 예 #1

; code의 각 인덱스 i에 따라 다음과 같이 mode와 ret가 변합니다.
; i	code[i]	mode	ret
; 0	"a"	0	"a"
; 1	"b"	0	"a"
; 2	"c"	0	"ac"
; 3	"1"	1	"ac"
; 4	"a"	1	"ac"
; 5	"b"	1	"acb"
; 6	"c"	1	"acb"
; 7	"1"	0	"acb"
; 8	"a"	0	"acba"
; 9	"b"	0	"acba"
; 10	"c"	0	"acbac"
; 따라서 "acbac"를 return 합니다.

;내풀이: enumerated()로 문자열의 각 문자에 대한 순회를 생성해준뒤 idx, char에 대한 접근을 진행하여 원하는 함수를 만들어냄 마지막에 삼항연산자 활용해서 리턴값 적용 
func solution(_ code: String) -> String {
    var ret = ""
    var mode = 0

    for (idx, char) in code.enumerated() {
        if mode == 0 {
            if char != "1" {
                if idx % 2 == 0 {
                    ret.append(char)
                }
            } else {
                mode = 1
            }
        } else {
            if char != "1" {
                if idx % 2 != 0 {
                    ret.append(char)
                }
            } else {
                mode = 0
            }
        }
    }

     return  ret.isEmpty ? "EMPTY" : ret
   

;다른풀이1: forEach문을 활용해서 접근 1일경우와 0일경우를 분리 계산 
func solution(_ code:String) -> String {
    var mode = 0
    var ret = ""
    code.enumerated().forEach {
        if $0.element == "1" {
            mode = (mode + 1) % 2
        } else if mode == 0 {
            ret = $0.offset % 2 == 0 ? ret + String($0.element) : ret
        } else {
            ret = $0.offset % 2 == 1 ? ret + String($0.element) : ret
        }
    }
    return ret.isEmpty ? "EMPTY" : ret
}
; ***offset: offset은 현재 순회 중인 요소의 인덱스를 나타냄.
; 즉, 현재 처리 중인 요소의 위치(인덱스)를 나타내며 0부터 시작하고 offset은 정수값이다.

; element: element는 현재 순회 중인 요소의 값
;  예를 들어, 문자열을 순회하면 element는 문자열 내의 현재 문자임

; code.enumerated().forEach 루프에서 $0은 현재 순회 중인 튜플이고
;  $0.offset은 해당 튜플의 인덱스를 나타내며, $0.element는 해당 튜플의 요소(문자)임


;다른풀이2:
func solution(_ code:String) -> String {
    var answer:[String] = []          ;문자열을 저장하기 위한 배열
    var code = code.map{String($0)}   ;문자열을 문자 배열로 변환하여 각 문자를 개별적으로 처리
    var flag:Int = 0                  ;변수 flag는 현재 모드를 나타내며 초기값은 0

    for i in 0..<code.count {
        if code[i] == "1" {    ;만약 현재 문자가 "1"이라면, flag를 반전  즉=  0에서 1로 또는 1에서 0으로 전환
            if flag == 0 {
                flag = 1
            } else {
                flag = 0
            }        
        } else {
            if flag == 0 && i % 2 == 0{
                answer.append(code[i])   ;만약 flag가 0이고 현재 인덱스가 짝수이면, 현재 문자를 answer 배열에 추가
            } else if flag == 1 && i % 2 == 1 {
                answer.append(code[i])   ;만약 flag가 1이고 현재 인덱스가 홀수이면, 현재 문자를 answer 배열에 추가
            }
        }
    }

    if answer.count == 0 {   
        return "EMPTY"      ;만약 answer 배열이 비어 있다면 "EMPTY"를 반환
    }
    return answer.joined()  ;answer 배열을 문자열로 변환하여 반환
}

;다른풀이3:
func solution(_ code:String) -> String {
    var codeArr = Array(code)
    var mode = 0
    var result = ""

    for i in 0..<code.count {
        if mode == 0 {
            if codeArr[i] == "1" {
                mode = 1
            } else {
                if i % 2 == 0 {
                    result += String(codeArr[i])
                }
            }
        } else {
            if codeArr[i] == "1" {
                mode = 0
            } else {
                if i % 2 != 0 {
                    result += String(codeArr[i])
                }
            }
        }
    }
    ; // 문자를 앞에서 부터 읽으면서 문자가 1이면 mode를 바꾼다.
    ; // 모드에 따라 뒤의 문자열은 만들어 낸다.
    ; // mode = 0과 1
    ; // mode가 0일때
    ; // 만약 현재 값이 "1"이 아니면  idx가 짝수일때만 현재 값을 ret에 넣는다.
    ; // 만약 현재 값이 "1"이면 모드를 1로 바꿔준다.

    ; // mode가 1일때
    ; // 만약 현재 값이 "1"이 아니면 idx가 홀수일때만 현재 값을 ret에 넣는다.
    ; // 만약 현재 값이 1이면 0으로 바꿔준다.


    if result == "" {
        return "EMPTY"
    } else {
        return result
    }
}