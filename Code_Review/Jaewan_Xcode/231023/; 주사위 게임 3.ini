; 주사위 게임 3
; 문제 설명
; 1부터 6까지 숫자가 적힌 주사위가 네 개 있습니다. 네 주사위를 굴렸을 때 나온 숫자에 따라 다음과 같은 점수를 얻습니다.

; 네 주사위에서 나온 숫자가 모두 p로 같다면 1111 × p점을 얻습니다.
; 세 주사위에서 나온 숫자가 p로 같고 나머지 다른 주사위에서 나온 숫자가 q(p ≠ q)라면 (10 × p + q)2 점을 얻습니다.
; 주사위가 두 개씩 같은 값이 나오고, 나온 숫자를 각각 p, q(p ≠ q)라고 한다면 (p + q) × |p - q|점을 얻습니다.
; 어느 두 주사위에서 나온 숫자가 p로 같고 나머지 두 주사위에서 나온 숫자가 각각 p와 다른 q, r(q ≠ r)이라면 q × r점을 얻습니다.
; 네 주사위에 적힌 숫자가 모두 다르다면 나온 숫자 중 가장 작은 숫자 만큼의 점수를 얻습니다.
; 네 주사위를 굴렸을 때 나온 숫자가 정수 매개변수 a, b, c, d로 주어질 때, 얻는 점수를 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; a, b, c, d는 1 이상 6 이하의 정수입니다.
; 입출력 예
; a	b	c	d	result
; 2	2	2	2	2222
; 4	1	4	4	1681
; 6	3	3	6	27
; 2	5	2	6	30
; 6	4	2	5	2
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번에서 네 주사위 숫자가 모두 2로 같으므로 1111 × 2 = 2222점을 얻습니다. 따라서 2222를 return 합니다.
; 입출력 예 #2

; 예제 2번에서 세 주사위에서 나온 숫자가 4로 같고 나머지 다른 주사위에서 나온 숫자가 1이므로 (10 × 4 + 1)2 = 412 = 1681점을 얻습니다. 따라서 1681을 return 합니다.
; 입출력 예 #3

; 예제 3번에서 a, d는 6으로, b, c는 3으로 각각 같으므로 (6 + 3) × |6 - 3| = 9 × 3 = 27점을 얻습니다. 따라서 27을 return 합니다.
; 입출력 예 #4

; 예제 4번에서 두 주사위에서 2가 나오고 나머지 다른 두 주사위에서 각각 5, 6이 나왔으므로 5 × 6 = 30점을 얻습니다. 따라서 30을 return 합니다.
; 입출력 예 #5

; 예제 5번에서 네 주사위 숫자가 모두 다르고 나온 숫자 중 가장 작은 숫자가 2이므로 2점을 얻습니다. 따라서 2를 return 합니다.



;내풀이 처음 .. 그냥 노가다 한번 뛰어봣음 
func solution(_ a:Int, _ b:Int, _ c:Int, _ d:Int) -> Int {
    var e : Int = 0
    switch a,b,c,d {
        case 
        if  a == b && b == c && c==d :
        return e += 1111 * a
        case 
        if a == b && b == c ||
           b == c && c == d ||
           c == d && d == a ||
           d == a && a == b :
        return 
        case  a == b && c == d ||
              a == c && b == d ||
              a == d && b == c :
        retrun e +=  ( (a + b) * ( a - b)   >  0 ?  *+ : *-  
              
                      
        default: ?
            
    }
    return 0
}


; 일단  많이 나오는수를 어떻게 변수에 넣어야할지 모르겠고,  값이 작은수를 어떻게 대입해야할지 몰랐음

;정답풀이: 나중에 다시보기 .. 

import Foundation

func solution(_ a:Int, _ b:Int, _ c:Int, _ d:Int) -> Int {
    var sum = 0

    if a == b && b == c && c == d {
        sum = a * 1111
    } else {
        var p = 0, q = 0
        var dice = [Int](repeating: 0, count: 7)
        dice[a] += 1; dice[b] += 1; dice[c] += 1; dice[d] += 1;

        if dice.filter { $0 == 1 }.count == 4 {
            for i in 1...6 {
                if dice[i] == 1 {
                    sum = i
                    break
                }
            }
        } else if dice.filter { $0 == 3 }.count == 1 {
            for d in dice.enumerated() {
                if d.element == 3 && p == 0 {
                    p = d.offset
                }
                if d.element == 1 {
                    q = d.offset
                }
            }
            sum = (10 * p) + q
            sum *= sum
        } else if dice.filter { $0 == 2 }.count == 2 {
            for d in dice.enumerated() {
                if d.element == 2 && p == 0 {
                    p = d.offset
                }
                if d.element == 2 && p != 0 {
                    q = d.offset
                }
            }
            sum = (p + q) * abs(p - q)
        } else {
            for d in dice.enumerated() {
                if d.element == 1 && p == 0 {
                    p = d.offset
                }
                if d.element == 1 && p != 0 {
                    q = d.offset
                }
            }
            sum = p * q
        }
    }

    return sum
}


;다른풀이1:
func solution(_ a:Int, _ b:Int, _ c:Int, _ d:Int) -> Int {
    var diceArray = [a, b, c, d]
    //주사위 정렬
    diceArray.sort()
    var score = 0

    // 모든 주사위 값이 같은 경우 (첫값 == 마지막 값)
    if diceArray[0] == diceArray[3] {
        score = diceArray[0] * 1111

    } else if diceArray[0] == diceArray[2] || diceArray[1] == diceArray[3] { 
        // 세 개의 주사위 값이 같은 경우 (하나 건너뛰고 같으면 세 개 다 같은 것이기 때문)
        if diceArray[0] == diceArray[2] {
            score = (10 * diceArray[0] + diceArray[3]) * (10 * diceArray[0] + diceArray[3])
        } else {
            score = (10 * diceArray[3] + diceArray[0]) * (10 * diceArray[3] + diceArray[0])
        }

    } else if diceArray[0] == diceArray[1] && diceArray[2] == diceArray[3] { 
        // 두 쌍의 주사위 값이 같은 경우
        score = (diceArray[0] + diceArray[2]) * abs(diceArray[0] - diceArray[2])

    } else if diceArray[0] != diceArray[1] && diceArray[1] != diceArray[2] && diceArray[2] != diceArray[3] {
        // 모든 주사위 값이 다른 경우
        score = diceArray[0]

    } else { 
        // 한 쌍만 같은 경우
        for i in 0 ..< diceArray.count {
            if i != diceArray.count - 1 {
                if diceArray[i] == diceArray[i + 1] {
                    score = diceArray.reduce(1, *) / (diceArray[i] * diceArray[i])
                }
            }
        }

    }
    return score
}


;다른풀이2:
import Foundation

func solution(_ a:Int, _ b:Int, _ c:Int, _ d:Int) -> Int {
    let preset: [Int] = [a, b, c, d]
    var pointsDic: [Int: Int] = [:]
    preset.forEach { item in
        if pointsDic[item] != nil {
            pointsDic[item]! += 1
        } else {
            pointsDic[item] = 1
        }
    }
    switch pointsDic.count{
        case 1: return 1111 * pointsDic.map { $0.key }[0]
        case 2:
            let threePointArray = pointsDic.filter({$0.value == 3})
            if !threePointArray.isEmpty {
                let p = threePointArray.map { $0.key }[0]
                let q = pointsDic.filter({$0.value == 1}).map { $0.key }[0]
                return (p*10 + q) * (p*10 + q)
            } else {
                let keys = pointsDic.map{$0.key}
                return (keys[0] + keys[1]) * abs(keys[0] - keys[1])
            }
        case 3: return pointsDic.filter({$0.value == 1}).map{$0.key}.reduce(1, *)
        default: return pointsDic.map { $0.key }.min()!
    }
}


;다른풀이4:
func solution(_ a:Int, _ b:Int, _ c:Int, _ d:Int) -> Int {
    let arr = Dictionary([a, b, c, d].map { ($0, 1) }, uniquingKeysWith: +).sorted { $0.value > $1.value }.map { $0 }
    switch arr.count {
        case 1: return a * 1111
        case 2: 
            if arr[0].value == arr[1].value {
                return (arr[0].key + arr[1].key) * (abs(arr[0].key - arr[1].key))
            } else {
                return (10 * arr[0].key + arr[1].key) * (10 * arr[0].key + arr[1].key)
            }
        case 3: return (arr[1].key * arr[2].key)
        default: return min(a, b, c, d)
    }
}