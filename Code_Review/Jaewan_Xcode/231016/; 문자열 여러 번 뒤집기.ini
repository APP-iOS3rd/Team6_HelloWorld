; 문자열 여러 번 뒤집기
; 문제 설명
; 문자열 my_string과 이차원 정수 배열 queries가 매개변수로 주어집니다. queries의 원소는 [s, e] 형태로, my_string의 인덱스 s부터 인덱스 e까지를 뒤집으라는 의미입니다. my_string에 queries의 명령을 순서대로 처리한 후의 문자열을 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; my_string은 영소문자로만 이루어져 있습니다.
; 1 ≤ my_string의 길이 ≤ 1,000
; queries의 원소는 [s, e]의 형태로 0 ≤ s ≤ e < my_string의 길이를 만족합니다.
; 1 ≤ queries의 길이 ≤ 1,000
; 입출력 예
; my_string	queries	result
; "rermgorpsam"	[[2, 3], [0, 7], [5, 9], [6, 10]]	"programmers"
; 입출력 예 설명
; 예제 1번의 my_string은 "rermgorpsam"이고 주어진 queries를 순서대로 처리하면 다음과 같습니다.

; queries	my_string
; "rermgorpsam"
; [2, 3]	"remrgorpsam"
; [0, 7]	"progrmersam"
; [5, 9]	"prograsremm"
; [6, 10]	"programmers"
; 따라서 "programmers"를 return 합니다.

;내풀이:
func solution(_ input: String, _ queries: [[Int]]) -> String {
    ; 입력 문자열 myString을 수정 가능한 형태로 변환하기 위해 Array(input)를 사용
    var myString = Array(input)

  for query in queries { ;for query in queries를 사용하여 각 쿼리에 대한 반복문
      let start = query[0]   ;현재 쿼리의 시작 위치와 끝 위치를 start와 end 변수에 할당 
      let end = query[1]
      
      ;쿼리의 유효성 검사 , 쿼리가 유효하지 않으면 continue를 사용하여 해당 쿼리를 무시
      ;(유효하지 않은 쿼리는 시작 위치가 음수이거나 시작 위치가 문자열 길이를 초과하거나 시작 위치가 끝 위치보다 큰 경우)
      if start < 0 || start >= myString.count || end < 0 || end >= myString.count || start > end 
      {
        continue
      }
      ; 유효한 쿼리에 대해, 시작 위치부터 끝 위치까지의 부분 문자열을 뒤집을 예정
    ; 이를 위해 i와 j 두 개의 포인터를 사용하며, i는 시작 위치를 가리키고 j는 끝 위치를 가르킴 
      var i = start
      var j = end
    
    ; while i < j를 사용하여 i와 j가 만날 때까지 문자를 스왑하여 부분 문자열을 뒤집을 것임 
      while i < j {
          let temp = myString[i]
          myString[i] = myString[j]
          myString[j] = temp
          i += 1
          j -= 1
      }
  }
;   return String(myString)를 사용하여 배열로 변환한 문자열을 다시 문자열로 변환
      return String(myString)
  }



;다른풀이1: reduce메서드 , 클로저 , 문자열조작 풀이 - 나중에 이해하기..
func solution(_ myString: String, _ queries: [[Int]]) -> String {
    queries.reduce(myString) { acc, arr in
        acc.prefix(arr[0]) + String(acc[acc.index(acc.startIndex, offsetBy: arr[0])
        ...acc.index(acc.startIndex, offsetBy: arr[1])].reversed())
         + acc.suffix(from: acc.index(acc.startIndex, offsetBy: arr[1] + 1))
    }
}

reduce 메서드를 사용하여 queries 배열을 반복하면서 결과를 누적합니다.
reduce는 배열의 요소를 순회하면서 어떤 초기값(myString)과 클로저 연산을 수행한 후 결과를 누적하는 함수입니다.

클로저 내부에서 각 쿼리는 다음과 같이 처리됩니다:

acc.prefix(arr[0]): 시작 위치 arr[0] 이전까지의 부분 문자열을 가져옵니다.
String(acc[acc.index(acc.startIndex, offsetBy: arr[0])...acc.index(acc.startIndex, offsetBy: arr[1])].reversed()):
시작 위치 arr[0]에서 끝 위치 arr[1]까지의 부분 문자열을 가져와 뒤집은 다음 문자열로 변환합니다.
acc.suffix(from: acc.index(acc.startIndex, offsetBy: arr[1] + 1)): 끝 위치 arr[1] + 1부터 문자열 끝까지의 부분 문자열을 가져옵니다.
이렇게 각 쿼리에 대해 처리한 부분 문자열을 합쳐서 새로운 문자열을 생성합니다. 이 결과가 다음 반복 단계의 acc가 됩니다.




;다른풀이2:
func solution(_ my_string:String, _ queries:[[Int]]) -> String {
; my_string 문자열을 수정 가능한 문자 배열로 변환하기 위해 my_string.map { $0 }를 사용
    var s = my_string.map { $0 }
; 현재 쿼리의 시작 위치와 끝 위치를 start와 end 변수에 할당
    for q in queries {
        let start = q[0]
        let end = q[1]
; 시작 위치부터 끝 위치까지의 부분 문자열을 뒤집고,다시 문자 배열로 변환
        let a = s[start...end].reversed().map { $0 }
; 쿼리를 반영한 문자열= 부분 문자열을 원래 문자열과 결합하여 새로운 문자 배열을 생성
        s = s[0..<start] + a + s[end + 1..<s.endIndex]
    }
; 문자 배열을 다시 문자열로 변환하여 반환
    return s.map { String($0) }.joined()
}




