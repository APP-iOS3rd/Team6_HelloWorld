; 문자열 겹쳐쓰기
; 문제 설명
; 문자열 my_string, overwrite_string과 정수 s가 주어집니다. 문자열 my_string의 인덱스 s부터 overwrite_string의 길이만큼을 문자열 overwrite_string으로 바꾼 문자열을 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; my_string와 overwrite_string은 숫자와 알파벳으로 이루어져 있습니다.
; 1 ≤ overwrite_string의 길이 ≤ my_string의 길이 ≤ 1,000
; 0 ≤ s ≤ my_string의 길이 - overwrite_string의 길이
; 입출력 예
; my_string	overwrite_string	s	result
; "He11oWor1d"	"lloWorl"	2	"HelloWorld"
; "Program29b8UYP"	"merS123"	7	"ProgrammerS123"
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번의 my_string에서 인덱스 2부터 overwrite_string의 길이만큼에 해당하는 부분은 "11oWor1"이고 이를 "lloWorl"로 바꾼 "HelloWorld"를 return 합니다.
; 입출력 예 #2

; 예제 2번의 my_string에서 인덱스 7부터 overwrite_string의 길이만큼에 해당하는 부분은 "29b8UYP"이고 이를 "merS123"로 바꾼 "ProgrammerS123"를 return 합니다.

; 내 풀이 - replaceSubrange 함수활용, offsetBy이해o

import Foundation

func solution(_ my_string:String, _ overwrite_string:String, _ s:Int) -> String {
    var result = my_string
    
    let endIndex = s + overwrite_string.count
    
    if s >= 0 && endIndex <= my_string.count {
        result.replaceSubrange(my_string.index(my_string.startIndex, offsetBy: s)..<my_string.index(my_string.startIndex, offsetBy: endIndex), with: overwrite_string)
    }
    
    return result
}

; 사용된 함수 참고자료1: replaceSubrange

; replaceSubrange는 Swift의 문자열 또는 배열과 같은 컬렉션 타입에서 사용되는 메서드입니다. 이 메서드는 지정된 범위의 요소를 다른 요소로 대체합니다.

; Swift에서 replaceSubrange 메서드는 다음과 같이 정의됩니다:

;** func replaceSubrange<C>(_ subrange: Range<Index>, with newElements: C) where C : Collection, Self.Element == C.Element

; subrange: 대체할 범위를 나타내는 Range 타입입니다. 이 범위는 컬렉션 내의 인덱스 범위로 지정됩니다.

; newElements: 대체할 새로운 요소들의 컬렉션입니다. 이 컬렉션은 대체할 요소들을 포함하고 있어야 합니다.

; 예를 들어, 문자열을 대체하는 경우 replaceSubrange 메서드를 사용하여 특정 범위의 문자를 다른 문자열로 대체할 수 있습니다. 아래는 간단한 예제입니다:

; var str = "Hello, World!"
; let range = str.index(str.startIndex, offsetBy: 7)..<str.index(str.startIndex, offsetBy: 12)
; let replacement = "Swift"

; str.replaceSubrange(range, with: replacement)

; print(str) // 출력: "Hello, Swift!"
; 위 코드에서는 "World"라는 부분을 "Swift"로 대체하고 있습니다. replaceSubrange를 사용하여 문자열의 일부를 대체할 수 있으며, 이는 배열 등의 다른 컬렉션에도 적용할 수 있습니다.



; 사용된 함수 참고자료2: offsetBy

; offsetBy는 Swift에서 문자열 인덱스를 조작하는 데 사용되는 메서드 중 하나입니다. 이 메서드는 문자열 내에서 특정 인덱스로부터 주어진 거리만큼 떨어진 위치에 있는 새로운 인덱스를 계산하는 데 사용됩니다.

; offsetBy 메서드는 다음과 같이 정의됩니다:

; func offsetBy(_ n: Int) -> String.Index
; n: 이동할 거리를 나타내는 정수입니다. 
; 양수 값은 인덱스를 문자열의 뒤쪽으로 이동하고, 
; 음수 값은 인덱스를 문자열의 앞쪽으로 이동시킵니다.
; 예를 들어

; let str = "Hello, World!"

; let startIndex = str.startIndex // 문자열의 첫 번째 인덱스
; let endIndex = str.endIndex // 문자열의 끝 다음 인덱스

; let fifthCharacterIndex = str.index(startIndex, offsetBy: 4) // 인덱스 4 (다섯 번째 문자 "o"의 위치)
; let backwardIndex = str.index(endIndex, offsetBy: -6) // 인덱스 -6 (뒤에서 여섯 번째 문자 "W"의 위치)

; print(str[fifthCharacterIndex]) // 출력: "o"
; print(str[backwardIndex]) // 출력: "W"
; 위 예제에서는 offsetBy를 사용하여 문자열 인덱스를 이동하고, 
; 해당 위치의 문자를 가져오는 방법을 보여주고 있습니다.

; 이를 통해 문자열에서 특정 위치에 있는 문자를 검색하거나 조작하는 데 사용할 수 있습니다.


; 다른 풀이1: 최대한 간결하게 replaceSubrange함수 활용

import Foundation

func solution(_ myString: String, _ overwriteString: String, _ s: Int) -> String {
    var myString = Array(myString)
    myString.replaceSubrange(s...(overwriteString.count+s-1), with: Array(overwriteString))
    return String(myString)
}


; 다른 풀이2: replaceSubrange쓰지 않고 (그대로 가져갈부분)(변경할부분)(다시 그대로 가져갈부분)으로 정리
; return에서의 그런 범위 지정관련해서 자르는 부분이 길어보이긴함(자를때 offsetBy활용함 )
import Foundation

func solution(_ my_string:String, _ overwrite_string:String, _ s:Int) -> String {
    let startIdx = my_string.index(my_string.startIndex, offsetBy: 0)
    let endIdx = my_string.index(my_string.endIndex, offsetBy: 0)
    let newStartIdx = my_string.index(my_string.startIndex, offsetBy: s)
    let newEndIdx = my_string.index(my_string.startIndex, offsetBy: s + overwrite_string.count)

    return "\(my_string[startIdx..<newStartIdx])\(overwrite_string)\(my_string[newEndIdx..<endIdx])"
} 

; 다른 풀이3: 풀이2번과 비슷하지만 a b c로 구간을 미리 나눔( prifix, suffix활용)

import Foundation

func solution(_ my_string:String, _ overwrite_string:String, _ s:Int) -> String {
; 문자열 'my_string'에서 시작 위치 's' 이전까지의 부분을 'a'에 저장
    let a = my_string.prefix(s)
;'overwrite_string'은 삽입할 문자열로 'b'에 저장
    let b = overwrite_string
;'y_string'에서 's' 위치 이후부터 끝까지의 부분을 'c'에 저장
    let c = my_string.suffix(my_string.count - overwrite_string.count - s)
;'a', 'b', 'c'를 합쳐서 최종 결과 문자열을 생성
    return a + b + c

; Prefix (접두사): 문자열의 시작 부분을 나타냅니다. 
; 특정 문자열이 다른 문자열의 접두사인 경우, 
; 그것은 시작 부분에서 연속적으로 일치하는 문자들을 가지고 있는 것을 
; 의미합니다. 예를 들어, "apple"과 "app"에서 
; "app"는 "apple"의 접두사입니다.

; Suffix (접미사): 문자열의 끝 부분을 나타냅니다.
;  특정 문자열이 다른 문자열의 접미사인 경우, 
;  그것은 끝 부분에서 연속적으로 일치하는 문자들을 
;  가지고 있는 것을 의미합니다. 예를 들어, 
;  "apple"과 "ple"에서 "ple"는 "apple"의 접미사입니다.