; 문자열 섞기
; 문제 설명
; 길이가 같은 두 문자열 str1과 str2가 주어집니다.

; 두 문자열의 각 문자가 앞에서부터 서로 번갈아가면서 한 번씩 등장하는 문자열을 만들어 return 하는 solution 함수를 완성해 주세요.

; 제한사항
; 1 ≤ str1의 길이 = str2의 길이 ≤ 10
; str1과 str2는 알파벳 소문자로 이루어진 문자열입니다.
; 입출력 예
; str1	str2	result
; "aaaaa"	"bbbbb"	"ababababab"


; 내 풀이: 일단 두 문자열중 길이가 짧은 것을 골라 그 짧은 길이까지 반복문을 돌려 서로 교차가 되어 str에 저장될 수 있도록 진행하였다
; 이후 짧은길이 이외에 남는 꼬투리문자열은 str1이길면 str1의 나머지가 붙을 수 있도록 아니면 그반대가 되도록 삼항 연산자를 이용하였다.
import Foundation

func solution(_ str1:String, _ str2:String) -> String {
    var str = ""
    let minLength = min(str1.count, str2.count)
    
    for i in 0..<minLength {
        let index1 = str1.index(str1.startIndex, offsetBy: i)
        let index2 = str2.index(str2.startIndex, offsetBy: i)

        str.append(str1[index1])
        str.append(str2[index2])
    }

    str1.count > minLength ? str.append(contentsOf: str1.suffix(from: str1.index(str.startIndex, offsetBy: minLength))) : str.append(contentsOf: str2.suffix(from:str2.index(str.startIndex, offsetBy: minLength))) )

    return str
}

;cf) 삼항연산자를 이용하였는데, 조금더 보기가 쉽게 정리할 수 있었다.
str.append(contentsOf: str1.count > minLength ? str1.suffix(from: str1.index(str1.startIndex, offsetBy: minLength)) : str2.suffix(from: str2.index(str2.startIndex, offsetBy: minLength)))
; ㄴ str.append(contentsOf: 가 중복으로 겹치니까 그런 앞부분들을 앞에 배치시키고 삼항연산자를 활용해서 참일때 이렇게 거짓일때 이렇게로 활용해서 쓰면 더욱 직관적일듯 하다.)

;cf) if - else문활용 
if str1.count > minLength {
        str.append(contentsOf: str1.suffix(from: str1.index(str1.startIndex, offsetBy: minLength)))
    } else if str2.count > minLength {
        str.append(contentsOf: str2.suffix(from: str2.index(str2.startIndex, offsetBy: minLength)))
    }
    


; 다른풀이1:  zip함수와 map활용 .joined활용 
import Foundation

func solution(_ str1:String, _ str2:String) -> String {
    return zip(str1, str2).map { String($0) + String($1) }.joined()
}
; 해석:
; 주어진 코드는 str1과 str2 두 문자열을 zip 함수를 사용하여 번갈아가면서 문자를 가져와서 이를 다시 문자열로 조합하여 반환하는 것을 시도하는 것으로 보입니다. 코드는 간결하고 효율적인 방법으로 문자열을 조합하려고 합니다.

; 여기에 코드를 풀어서 설명해보겠습니다:

; zip(str1, str2)를 사용하여 str1과 str2의 문자열을 번갈아가면서 튜플로 조합합니다. 이렇게 하면 각 튜플은 str1과 str2에서 동일한 위치에 있는 문자를 포함합니다.

; map 함수를 사용하여 각 튜플을 문자열로 변환합니다. $0와 $1은 각각 튜플의 첫 번째와 두 번째 요소를 나타냅니다.

; joined() 함수를 사용하여 모든 문자열을 하나의 문자열로 결합합니다. 이렇게 하면 문자열이 번갈아가면서 조합된 최종 문자열이 생성됩니다.

; 예를 들어, str1이 "Hello"이고 str2가 "World"라면 zip(str1, str2)는 다음과 같이 동작합니다:

; ('H', 'W')
; ('e', 'o')
; ('l', 'r')
; ('l', 'l')
; ('o', 'd')
; map 및 joined 함수를 사용하여 이러한 튜플을 문자열로 조합하면 "HWelldo"가 됩니다.

; 따라서 주어진 코드는 str1과 str2를 번갈아가면서 문자를 가져와서 조합한 결과를 반환합니다.

; ***zip 함수란?
; 많은 프로그래밍 언어에서 지원하는 기능 중 하나로, 두 개 이상의 컬렉션(주로 배열 또는 시퀀스)을 조합하여 하나의 컬렉션으로 만드는 데 사용됩니다. 각 입력 컬렉션에서 동일한 인덱스 위치에 있는 요소들을 묶어서 튜플로 반환합니다.
; Swift에서 zip 함수는 두 개 이상의 시퀀스를 인자로 받아 해당 시퀀스들을 조합하여 튜플의 배열을 생성합니다. 각 튜플은 주어진 시퀀스들의 동일한 위치에 있는 요소들을 묶습니다.
; 예를 들어, 두 개의 배열을 zip 함수를 사용하여 조합할 수 있습니다:

let numbers = [1, 2, 3, 4]
let letters = ["A", "B", "C", "D"]

let zipped = zip(numbers, letters)

for (number, letter) in zipped {
    print("\(number): \(letter)")
}
; 위 코드에서 zip(numbers, letters)는 두 개의 배열 numbers와 letters를 조합하여 튜플의 배열을 생성합니다. 각 튜플은 두 배열의 동일한 위치에 있는 요소들을 묶습니다. 그런 다음 for-in 루프를 사용하여 튜플의 요소를 분리하여 출력합니다.

; 결과:

; 1: A
; 2: B
; 3: C
; 4: D
; zip 함수는 보다 복잡한 조합 작업에서 유용하며, 여러 컬렉션의 요소들을 일대일로 매핑하거나 연관시킬 때 사용됩니다.


; ***.map?
; map은 함수형 프로그래밍에서 자주 사용되는 고차 함수(higher-order function) 중 하나입니다. map 함수는 컬렉션(배열, 리스트, 딕셔너리 등) 내의 각 요소에 동일한 연산을 적용하여 새로운 컬렉션을 생성하는 데 사용됩니다.

; Swift에서 map 함수는 다음과 같이 정의됩니다:

; swift
; Copy code
; func map<T>(_ transform: (Element) throws -> T) rethrows -> [T]
; transform: 각 요소에 적용할 변환 클로저(함수)입니다. 클로저는 컬렉션의 원소(Element)를 입력으로 받아 변환된 값(T)을 반환합니다. 이 클로저를 사용하여 각 원소를 변환합니다.

; rethrows: transform 클로저가 에러를 던질 수 있는 경우, rethrows 키워드를 사용하여 해당 에러를 다시 던질 수 있음을 나타냅니다.

; 반환 값: 변환된 요소로 이루어진 배열([T])을 반환합니다.

; map 함수는 각 요소를 변환하여 새로운 배열을 생성합니다. 각 요소는 입력 컬렉션의 순서를 유지한 채로 변환됩니다.

; 예를 들어, 정수 배열을 받아 각 요소를 제곱한 새로운 배열을 생성하는 예제를 살펴보겠습니다:

; swift
; Copy code
; let numbers = [1, 2, 3, 4, 5]
; let squaredNumbers = numbers.map { $0 * $0 }
; print(squaredNumbers) // 출력: [1, 4, 9, 16, 25]
; 위 코드에서 map 함수는 각 정수를 제곱하여 새로운 배열을 생성하고, squaredNumbers에 저장합니다.

; map 함수는 변환 작업을 수행하고 원본 컬렉션을 변경하지 않으며, 새로운 컬렉션을 반환합니다. 이러한 특징은 함수형 프로그래밍에서 데이터 변환 작업을 더 간결하고 안전하게 수행하는 데 도움이 됩니다.


; ***joined?***
; .joined()는 Swift에서 문자열 배열(또는 다른 시퀀스)을 결합하여 하나의 문자열로 만드는 메서드입니다. 이 메서드는 배열의 각 문자열 요소를 연결하고 구분자를 포함하지 않는 단일 문자열을 반환합니다.

; .joined() 메서드를 사용하면 문자열 배열을 간편하게 하나의 문자열로 합칠 수 있습니다. 예를 들어, 여러 개의 단어로 이루어진 문자열 배열을 하나의 문장으로 결합하려는 경우에 유용합니다.

; 다음은 .joined() 메서드의 간단한 예제입니다:

; swift
; Copy code
; let words = ["Hello", "World", "Swift"]
; let combinedString = words.joined(separator: " ")
; print(combinedString) // 출력: "Hello World Swift"
; 위 예제에서는 문자열 배열 words를 .joined(separator:) 메서드를 사용하여 하나의 문자열로 결합하고, 단어 사이에 공백 문자를 사용하여 구분합니다.

; .joined(separator:) 메서드에서 separator 매개변수를 사용하여 각 요소 사이에 삽입할 문자열 구분자를 지정할 수 있습니다. 구분자를 생략하면 요소 사이에 아무런 구분자가 없는 문자열이 반환됩니다.

; 이렇게 함으로써 문자열 배열의 요소들을 연결하여 하나의 문자열로 만들 수 있으며, 이는 텍스트 생성 및 출력에 유용합니다.