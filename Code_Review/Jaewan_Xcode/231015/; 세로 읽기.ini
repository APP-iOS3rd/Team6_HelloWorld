; 세로 읽기
; 문제 설명
; 문자열 my_string과 두 정수 m, c가 주어집니다. my_string을 한 줄에 m 글자씩 가로로 적었을 때 왼쪽부터 세로로 c번째 열에 적힌 글자들을 문자열로 return 하는 solution 함수를 작성해 주세요.

; 제한사항
; my_string은 영소문자로 이루어져 있습니다.
; 1 ≤ m ≤ my_string의 길이 ≤ 1,000
; m은 my_string 길이의 약수로만 주어집니다.
; 1 ≤ c ≤ m
; 입출력 예
; my_string	m	c	result
; "ihrhbakrfpndopljhygc"	4	2	"happy"
; "programmers"	1	1	"programmers"
; 입출력 예 설명
; 입출력 예 #1

; 예제 1번의 my_string을 한 줄에 4 글자씩 쓰면 다음의 표와 같습니다.

; 1열	2열	3열	4열
; i	h	r	h
; b	a	k	r
; f	p	n	d
; o	p	l	j
; h	y	g	c
; 2열에 적힌 글자를 세로로 읽으면 happy이므로 "happy"를 return 합니다.

; 입출력 예 #2

; 예제 2번의 my_string은 m이 1이므로 세로로 "programmers"를 적는 것과 같고 따라서 1열에 적힌 글자를 세로로 읽으면 programmers입니다. 
;따라서 "programmers"를 return 합니다.

;내풀이:
import Foundation

func solution(_ myString: String, _ m: Int, _ c: Int) -> String {
    var result = ""
    
    // 문자열을 m 글자씩 나누는 부분
    var startIndex = myString.startIndex
    while startIndex < myString.endIndex {
        let endIndex = myString.index(startIndex, offsetBy: m, limitedBy: myString.endIndex) ?? myString.endIndex
        let substring = myString[startIndex..<endIndex]
        
        // c 번째 열에서 글자를 추출하는 부분
        if c <= substring.count {
            let index = substring.index(substring.startIndex, offsetBy: c - 1)
            result.append(substring[index])
        }
        
        startIndex = endIndex
    }
    
    return result
}


;다른풀이1:
func solution(_ myString: String, _ m: Int, _ c: Int) -> String {
    return myString.enumerated()
        .filter { $0.offset % m == c - 1 }
        .map { String($0.element) }
        .joined()
}


;다른풀이2:
import Foundation

func solution(_ my_string:String, _ m:Int, _ c:Int) -> String {
    let my_string = my_string.map(String.init)
    return stride(from: 0, to: my_string.count, by: m).reduce("") {
        let index = $1 + c - 1
        return index < my_string.count ? $0 + my_string[index] : $0
    }
}


;다른풀이3:
import Foundation

func solution(_ my_string:String, _ m:Int, _ c:Int) -> String {
    var answer = ""
    var tempArr: [String] = []
    for str in Array(my_string) {
        tempArr.append(String(str))
        if tempArr.count == m {
            answer += tempArr[c-1]
            tempArr = []
        }
    }
    return answer
}


;다른풀이4:
mport Foundation

func solution(_ my_string:String, _ m:Int, _ c:Int) -> String {
    var answer = ""
    for i in stride(from: 0, to: my_string.count, by: m) {
        let charIndex = String.Index(utf16Offset: i + c - 1, in: my_string)
        answer += my_string[charIndex...charIndex]
    }

    return answer
}
