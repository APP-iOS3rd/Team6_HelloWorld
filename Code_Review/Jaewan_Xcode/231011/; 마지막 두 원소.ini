; 마지막 두 원소
; 문제 설명
; 정수 리스트 num_list가 주어질 때, 마지막 원소가 그전 원소보다 크면 마지막 원소에서 그전 원소를 뺀 값을 마지막 원소가 그전 원소보다 크지 않다면 마지막 원소를 두 배한 값을 추가하여 return하도록 solution 함수를 완성해주세요.

; 제한사항
; 2 ≤ num_list의 길이 ≤ 10
; 1 ≤ num_list의 원소 ≤ 9
; 입출력 예
; num_list	result
; [2, 1, 6]	[2, 1, 6, 5]
; [5, 2, 1, 7, 5]	[5, 2, 1, 7, 5, 10]
; 입출력 예 설명
; 입출력 예 #1

; 마지막 원소인 6이 그전 원소인 1보다 크기 때문에 6 - 1인 5를 추가해 return합니다.
; 입출력 예 #2

; 마지막 원소인 5가 그전 원소인 7보다 크지 않기 때문에 5의 두 배인 10을 추가해 return합니다.

;내풀이: popLast() 활용해서 꺼낸뒤에, append로 뒤에서 추가적으로 들어가게함 - 하면서 안전하게 옵셔널 바인딩진행 
;feedback: 옵셔널 바인딩이 필요했던점, append가 어떻게 진행되는지 머릿속에 그려졌던점 (  a b 순서 )
;feedback: result result1 만들고 나중에 +로 연결 

;**옵셔널 바인딩의 이유 :
;안전한 값 추출: 배열에서 popLast() 메서드를 호출하면 배열이 비어있는 경우 nil이 반환됩니다.
;  이 경우에 바로 nil을 사용하면 런타임 오류가 발생할 수 있습니다. 
;  따라서 if let을 사용하여 옵셔널 값을 안전하게 추출하고, 값이 없는 경우에 대비할 수 있습니다.

; 코드 가독성: 옵셔널 바인딩을 사용하면 코드의 의도가 명확해집니다. 
; 이해하기 쉽고 유지 보수가 용이한 코드를 작성할 수 있습니다.

; 오류 처리: 옵셔널 바인딩을 사용하면 오류 조건을 처리하기가 더 쉬워집니다. 
; 값이 존재하지 않는 경우에 대비하여 코드를 작성할 수 있으며, 이를 통해 예기치 않은 동작을 방지할 수 있습니다.

; Swift의 옵셔널 타입 체계: Swift는 옵셔널 타입을 사용하여 값이 없을 수 있는 상황을 명시적으로 표현합니다. 
; 이것은 Swift의 안전성을 높이는 중요한 부분이며, 옵셔널 바인딩은 이러한 체계를 지키는 데 도움이 됩니다.

; 따라서 당신의 코드에서 if let을 사용하여 popLast() 메서드에서 반환된 값을 옵셔널에서 
; 안전하게 추출하는 것은 좋은 습관이며, 잠재적인 오류를 방지하고 코드의 가독성을 높일 수 있습니다.
import Foundation

func solution(_ num_list:[Int]) -> [Int] {
    var result = num_list
    var result1 = [Int]()
    if let b = result.popLast(), let a = result.popLast() {
        result1.append(a)
        result1.append(b)
        result1.append(a < b ? b - a : 2 * b)
       
    }
    return result  + result1 
}


;다른풀이1: prev, last 로서 새로운 인덱스를 정의하고  num_list.count-2 , -1 로 그 부분의 인덱스를 정의함 이후 
; return에서 추가해야할부분의 인덱스를 []로 지정하고 삼항연산자를 이용하여 정리함 last > prev ?  last - prev : last * 2 
func solution(_ num_list:[Int]) -> [Int] {
    let prev = num_list[num_list.count-2]
    let last = num_list[num_list.count-1]
    return num_list + [last > prev ? last-prev : last * 2]
}


;다른풀이2:numList의 마지막 요소를 기반으로 계산된 값을 answer 배열에 추가함. 만약 numList가 비어있으면 빈 배열을 반환

func solution(_ numList: [Int]) -> [Int] {
;원래 배열을 변경하지 않고 결과를 저장하기 위한 배열 answer생성
    var answer = numList
;numList.last를 사용하여 배열의 마지막 요소를 추출_ 그런 다음 guard 구문을 사용하여 이 값을 옵셔널 바인딩
;만약 numList가 비어있다면(numList.last가 nil인 경우), 빈 배열([])을 반환하고 함수를 종료함
    guard let last = numList.last else { return [] }
    

    answer.append(answer[numList.endIndex - 2] >= last ? 2 * last : last - answer[numList.endIndex - 2])
    return answer
}


;다른풀이3: num_list.last!로 마지막배열 뽑고, num_list[num_list.count - 2]로 그 다음 배열을 뽑아내는게 핵심 
import Foundation

func solution(_ num_list:[Int]) -> [Int] {
    if num_list.last! > num_list[num_list.count - 2] {
        return num_list + [num_list.last! - num_list[num_list.count - 2]]
    } else {
        return num_list + [num_list.last! * 2]
    }
}

;내풀이2: 삼항연산자로 새로 정의 
func solution(_ num_list:[Int]) -> [Int] {
return num_list + ( num_list.last! > num_list[num_list.count - 2] ? [num_list.last! - num_list[num_list.count - 2]] : [num_list.last! * 2] ) 
}